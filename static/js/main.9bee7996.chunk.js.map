{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","active","isGreen","total","isRed","isAll","props","Card","onClick","className","CardContent","Typography","numeral","format","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","color","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","App","useState","setCountries","setCountryInfo","tableData","setTableData","setCountry","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","useEffect","fetch","then","res","json","name","value","iso2","getCountriesData","changeCountry","e","countryCode","target","response","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bee7996.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\nimport './InfoBox.css'\r\nimport numeral from \"numeral\";\r\n\r\nconst InfoBox = ({ title, cases, active, isGreen, total, isRed, isAll, ...props}) => {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}` }>\r\n            <CardContent>\r\n                {!isAll &&\r\n                <Typography className=\"infoBox__title\">\r\n                    {title}\r\n                </Typography>\r\n                \r\n                }\r\n\r\n                <h2 className={`infoBox__cases ${isGreen && 'infoBox__cases--green'} ${isAll && 'infoBox__all'}`}>\r\n                    {!isAll? total : <strong>{numeral(total).format(\"0,0\")}</strong>}\r\n                    \r\n                </h2>\r\n                <Typography className=\"infoBox__total\">\r\n                    {!isAll? cases: <p>TOTAL CASES</p>}\r\n                    \r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\"\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 300,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 100,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 298,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    let sortedData = [...data];\r\n    sortedData.sort((a, b) => {\r\n      if (a.cases > b.cases) {\r\n        return -1;\r\n      } else {\r\n        return 1;\r\n      }\r\n    });\r\n    return sortedData;\r\n  };\r\n\r\n  export const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"Unavailable\";\r\n\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\ndata.map((country) => (\r\n  <Circle\r\n    center={[country.countryInfo.lat, country.countryInfo.long]}\r\n    color={casesTypeColors[casesType].hex}\r\n    fillColor={casesTypeColors[casesType].hex}\r\n    fillOpacity={0.4}\r\n    radius={\r\n      Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n    }\r\n  >\r\n    <Popup>\r\n    <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n    </Popup>\r\n  </Circle>\r\n));","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from './util'\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","\r\nimport React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;","import './App.css';\nimport { MenuItem, FormControl, Select, Card, CardContent } from '@material-ui/core'\nimport { useState, useEffect } from 'react'\nimport InfoBox from './InfoBox'\nimport Map from './Map'\nimport Table from './Table'\n// import LineGraph from './LineGraph'\nimport './Table.css'\nimport { sortData, prettyPrintStat } from './util'\nimport 'leaflet/dist/leaflet.css'\n\n\nfunction App() {\n  const[countries, setCountries] = useState([])\n  const[countryInfo, setCountryInfo] = useState([])\n  const[tableData, setTableData] = useState([])\n  const[country, setCountry] = useState('worldwide')\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({\n    lat: 34.80746, lng: -40.4796\n  })\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n\n\n  useEffect(() => {\n      fetch(\"https://disease.sh/v3/covid-19/all\")\n        .then(res => res.json())\n        .then(data => {\n          setCountryInfo(data)\n        }) \n  })\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n    await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((res) => res.json())\n      .then((data) => {\n        const countries = data.map((country) => ({\n          name: country.country,\n          value: country.countryInfo.iso2,\n        }\n\n        ))\n        const sortedData = sortData(data)\n        setTableData(sortedData);\n        setCountries(countries)\n        setMapCountries(data)\n      })\n  }\n  getCountriesData();\n  }, []);\n  \n  \n  const changeCountry = async (e) => {\n    const countryCode = e.target.value\n    // console.log\n\n    const url = countryCode ==='worldwide'\n      ? 'https://disease.sh/v3/covid-19/all'\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode)\n        setCountryInfo(data)\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      })\n      \n      \n    }\n  \nreturn (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" onChange={changeCountry} value={country}>\n              <MenuItem  value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n        \n              <MenuItem value={country.value}>{country.name}</MenuItem>\n        \n              ))}\n        \n              {/* <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              <MenuItem value=\"worldwide\">option</MenuItem>\n              <MenuItem value=\"worldwide\">option</MenuItem> */}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n              <InfoBox\n                isRed \n                active={casesType === \"cases\"}\n                onClick={(e) => setCasesType(\"cases\")}\n                total={prettyPrintStat(countryInfo.cases)}\n                cases={prettyPrintStat(countryInfo.todayCases)} \n                title=\"Coronavirus Cases\"/>\n              <InfoBox\n              isGreen\n                active={casesType === \"recovered\"} \n                onClick={(e) => setCasesType(\"recovered\")}\n                total={prettyPrintStat(countryInfo.recovered)} \n                cases={prettyPrintStat(countryInfo.todayRecovered)} \n                title=\"Recovered\"/>\n              <InfoBox\n                isRed\n                active={casesType === \"deaths\"}\n                onClick={(e) => setCasesType(\"deaths\")} \n                total={prettyPrintStat(countryInfo.deaths)} \n                cases={prettyPrintStat(countryInfo.todayDeaths)} \n                title=\"Deaths\"/>\n        </div>\n        <Map \n        casesType={casesType}\n        countries={mapCountries}\n        center={mapCenter}\n        zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          \n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <br/>\n          <br/>\n          <h3>Worldwide new cases</h3>\n          {/* <LineGraph casesType={casesType} /> */}\n          <InfoBox\n                isAll \n                // active={casesType === \"cases\"}\n                // onClick={(e) => setCasesType(\"cases\")}\n                total={countryInfo.cases}\n                cases={prettyPrintStat(countryInfo.todayCases)} \n                title=\"Coronavirus Cases\"/>\n        </CardContent>      \n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}